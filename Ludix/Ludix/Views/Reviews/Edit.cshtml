@model Ludix.Models.Review
@{
    ViewData["Title"] = "Editar Avaliação";

    var currentUserId = ViewContext.HttpContext.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    bool isOwner = Model.MyUser?.AspUser == currentUserId;
    bool canEdit = isOwner;
}

<div class="container mt-4">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">
                            <i class="fas fa-edit"></i> Editar Avaliação
                        </h3>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Informações do jogo -->
                    <div class="alert alert-info mb-4">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-gamepad fa-2x me-3"></i>
                            <div>
                                <h6 class="mb-1">Jogo: @ViewData["GameTitle"]</h6>
                                <small class="text-muted">
                                    Avaliação original de: @(Model.MyUser?.Username ?? "Utilizador")
                                    em @Model.ReviewDate.ToString("dd/MM/yyyy HH:mm")
                                </small>
                            </div>
                        </div>
                    </div>

                    @if (!canEdit)
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            Não tem permissão para editar esta avaliação.
                        </div>
                    }
                    else
                    {
                        <!-- Formulário de edição -->
                        <form asp-action="Edit" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" asp-for="ReviewId" />

                            <div class="mb-4">
                                <label asp-for="Rating" class="form-label">
                                    <i class="fas fa-star text-warning"></i> Classificação *
                                </label>
                                <div class="rating-input">
                                    <div class="btn-group" role="group" aria-label="Rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <input type="radio" class="btn-check" name="Rating" id="rating@(i)" value="@i"
                                                   @(Model.Rating == i ? "checked" : "") required />
                                            <label class="btn btn-outline-warning" for="rating@(i)">
                                                @i <i class="fas fa-star"></i>
                                            </label>
                                        }
                                    </div>
                                </div>
                                <span asp-validation-for="Rating" class="text-danger"></span>
                                <small class="form-text text-muted">Selecione uma classificação de 1 a 5 estrelas</small>
                            </div>

                            <div class="mb-4">
                                <label asp-for="ReviewText" class="form-label">
                                    <i class="fas fa-comment"></i> Comentário (opcional)
                                </label>
                                <textarea asp-for="ReviewText" class="form-control" rows="5" 
                                          placeholder="Partilhe a sua opinião sobre este jogo..." 
                                          maxlength="500"></textarea>
                                <span asp-validation-for="ReviewText" class="text-danger"></span>
                                <div class="form-text text-muted d-flex justify-content-between">
                                    <span>Máximo 500 caracteres</span>
                                    <span id="charCount">0/500</span>
                                </div>
                            </div>

                            <!-- Preview da avaliação -->
                            <div class="card bg-light mb-4">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="fas fa-eye"></i> Pré-visualização
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div>
                                            <h6 class="card-title mb-1">
                                                @(Model.MyUser?.Username ?? "Utilizador")
                                                <span class="badge bg-success ms-2">Verificado</span>
                                            </h6>
                                            <div class="rating mb-2" id="previewRating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= Model.Rating)
                                                    {
                                                        <span class="text-warning">★</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">☆</span>
                                                    }
                                                }
                                                <span class="ms-2 text-muted">(<span id="previewRatingValue">@Model.Rating</span>/5)</span>
                                            </div>
                                        </div>
                                        <small class="text-muted">@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</small>
                                    </div>
                                    
                                    <p class="card-text" id="previewText">
                                        @if (!string.IsNullOrEmpty(Model.ReviewText))
                                        {
                                            @Model.ReviewText
                                        }
                                        else
                                        {
                                            <em class="text-muted">Sem comentário</em>
                                        }
                                    </p>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <button type="submit" class="btn btn-primary me-2">
                                        <i class="fas fa-save"></i> Guardar Alterações
                                    </button>
                                    <a href="@Url.Action("Details", "Games", new { id = Model.GameId })" class="btn btn-secondary">
                                        <i class="fas fa-times"></i> Cancelar
                                    </a>
                                </div>
                                
                                @if (canEdit)
                                {
                                    <div>
                                        <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                            <i class="fas fa-trash"></i> Eliminar Avaliação
                                        </button>
                                    </div>
                                }
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de confirmação para eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-danger"></i> Confirmar Eliminação
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Tem a certeza que deseja eliminar esta avaliação?</p>
                <p class="text-muted"><strong>Esta ação não pode ser desfeita.</strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <form asp-controller="Reviews" asp-action="Delete" asp-route-id="@Model.ReviewId" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const ratingInputs = document.querySelectorAll('input[name="Rating"]');
            const reviewTextArea = document.querySelector('textarea[name="ReviewText"]');
            const charCount = document.getElementById('charCount');
            const previewRating = document.getElementById('previewRating');
            const previewRatingValue = document.getElementById('previewRatingValue');
            const previewText = document.getElementById('previewText');

            // Atualizar contador de caracteres
            function updateCharCount() {
                const length = reviewTextArea.value.length;
                charCount.textContent = length + '/500';
                
                if (length > 450) {
                    charCount.classList.add('text-warning');
                } else if (length === 500) {
                    charCount.classList.remove('text-warning');
                    charCount.classList.add('text-danger');
                } else {
                    charCount.classList.remove('text-warning', 'text-danger');
                }
            }

            // Atualizar preview do rating
            function updatePreviewRating(rating) {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    if (i <= rating) {
                        stars += '<span class="text-warning">★</span>';
                    } else {
                        stars += '<span class="text-muted">☆</span>';
                    }
                }
                stars += '<span class="ms-2 text-muted">(' + rating + '/5)</span>';
                previewRating.innerHTML = stars;
                previewRatingValue.textContent = rating;
            }

            // Atualizar preview do texto
            function updatePreviewText() {
                const text = reviewTextArea.value.trim();
                if (text) {
                    previewText.innerHTML = text;
                } else {
                    previewText.innerHTML = '<em class="text-muted">Sem comentário</em>';
                }
            }

            // Event listeners
            reviewTextArea.addEventListener('input', function() {
                updateCharCount();
                updatePreviewText();
            });

            ratingInputs.forEach(input => {
                input.addEventListener('change', function() {
                    updatePreviewRating(parseInt(this.value));
                });
            });

            // Inicializar
            updateCharCount();
            updatePreviewText();
        });
    </script>
}