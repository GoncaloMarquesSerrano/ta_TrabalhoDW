@model Ludix.Models.Game
@{
    ViewData["Title"] = "Details";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h2>@Model.Title</h2>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <img src="~/covers/@Model.Cover" alt="@Model.Title Cover" class="img-fluid rounded" style="max-width: 100%; height: auto;" />
                        </div>
                        <div class="col-md-8">
                            <dl class="row">
                                <dt class="col-sm-4">Preço:</dt>
                                <dd class="col-sm-8"><strong class="text-success">@Model.Price.ToString("C")</strong></dd>
                                
                                <dt class="col-sm-4">Data de Lançamento:</dt>
                                <dd class="col-sm-8">@Model.ReleaseDate.ToString("dd/MM/yyyy")</dd>
                                
                                <dt class="col-sm-4">Desenvolvedor:</dt>
                                <dd class="col-sm-8">@(Model.Developer?.Username ?? "N/A")</dd>
                                
                                <dt class="col-sm-4">Géneros:</dt>
                                <dd class="col-sm-8">
                                    @if (Model.Genres != null && Model.Genres.Any())
                                    {
                                        <div class="d-flex flex-wrap">
                                            @foreach (var genre in Model.Genres)
                                            {
                                                <span class="badge bg-secondary me-1 mb-1">@genre.GenreName</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Nenhum género associado</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="mt-3">
                            <h5>Descrição</h5>
                            <p class="text-muted">@Model.Description</p>
                        </div>
                    }
                </div>
            </div>
            <div class="card mt-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Avaliações</h4>
                    @if (Model.Reviews != null && Model.Reviews.Any())
                    {
                        <div class="text-end">
                            <span class="badge bg-primary">@Model.Reviews.Count() avaliações</span>
                            <span class="badge bg-warning text-dark">
                                @Math.Round(Model.Reviews.Average(r => r.Rating), 1)/5 ★
                            </span>
                        </div>
                    }
                </div>
                <div class="card-body">
                    @if (User.Identity.IsAuthenticated)
                    {
                        @* Verificar se o utilizador ja fez review para este jogo *@
                            var userReview = Model.Reviews?.FirstOrDefault(r => r.MyUser?.AspUser == ViewContext.HttpContext.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value);
                        @if (userReview == null)
                        {
                            <!-- Formulario para criar nova review -->
                            <div class="card border-primary mb-4">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0"><i class="fas fa-star"></i> Avaliar este jogo</h6>
                                </div>
                                <div class="card-body">
                                    <form asp-controller="Reviews" asp-action="Create" method="post">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="GameId" value="@Model.GameId" />

                                        <div class="mb-3">
                                            <label for="Rating" class="form-label">Classificação *</label>
                                            <div class="rating-input">
                                                <div class="btn-group" role="group" aria-label="Rating">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <input type="radio" class="btn-check" name="Rating" id="rating@(i)" value="@i" required>
                                                        <label class="btn btn-outline-warning" for="rating@(i)">
                                                            @i <i class="fas fa-star"></i>
                                                        </label>
                                                    }
                                                </div>
                                            </div>
                                            <small class="form-text text-muted">Selecione uma classificação de 1 a 5 estrelas</small>
                                        </div>

                                        <div class="mb-3">
                                            <label for="ReviewText" class="form-label">Comentário (opcional)</label>
                                            <textarea class="form-control" name="ReviewText" id="ReviewText" 
                                                      rows="4" placeholder="Partilhe a sua opinião sobre este jogo..." maxlength="500"></textarea>
                                            <small class="form-text text-muted">Máximo 500 caracteres</small>
                                        </div>

                                        <div class="d-flex justify-content-between">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-paper-plane"></i> Publicar Avaliação
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Mostrar que o utilizador ja fez review -->
                            <div class="alert alert-info mb-4">
                                <i class="fas fa-info-circle"></i>
                                Já avaliou este jogo. Pode <a href="@Url.Action("Edit", "Reviews", new { id = userReview.ReviewId })" class="alert-link">editar a sua avaliação</a> se desejar.
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <a href="@Url.Action("Login", "Account", new { area = "Identity" })">Faça login</a> para avaliar este jogo.
                        </div>
                    }

                    @if (Model.Reviews != null && Model.Reviews.Any())
                    {
                        <!-- Lista de Reviews -->
                        <div class="reviews-list">
                            @foreach (var review in Model.Reviews.OrderByDescending(r => r.ReviewDate))
                            {
                                <div class="card mb-3 border-light">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div>
                                                <h6 class="card-title mb-1">
                                                    @(review.MyUser?.Username ?? "Utilizador Anónimo")
                                                </h6>
                                                <div class="rating mb-2">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        if (i <= review.Rating)
                                                        {
                                                            <span class="text-warning">★</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">☆</span>
                                                        }
                                                    }
                                                    <span class="ms-2 text-muted">(@review.Rating/5)</span>
                                                </div>
                                            </div>
                                            <small class="text-muted">@review.ReviewDate.ToString("dd/MM/yyyy HH:mm")</small>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(review.ReviewText))
                                        {
                                            <p class="card-text">@review.ReviewText</p>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-star-o fa-3x mb-3"></i>
                            <p>Este jogo ainda não tem avaliações.</p>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <p>Seja o primeiro a avaliar!</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar com acoes -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5>Ações</h5>
                </div>
                <div class="card-body">
                    @if (User.Identity.IsAuthenticated)
                    {
                            var currentUserId = ViewContext.HttpContext.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                            // Verificar se o utilizador e o desenvolvedor do jogo
                            bool isDeveloper = Model.Developer?.AspUser == currentUserId;
                            // Verificar se o utilizador e admin 
                            bool isAdmin = ViewBag.IsAdmin != null ? (bool)ViewBag.IsAdmin : false;
                            
                            bool canManageGame = isDeveloper || isAdmin;
                        @if (canManageGame)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.GameId" class="btn btn-warning btn-block mb-2">
                                <i class="fas fa-edit"></i> Editar Jogo
                            </a>
                            
                            <a asp-action="Delete" asp-route-id="@Model.GameId" class="btn btn-danger btn-block mb-2"
                               onclick="return confirm('Tem certeza que deseja eliminar este jogo? Esta ação não pode ser desfeita!')">
                                <i class="fas fa-trash"></i> Eliminar Jogo
                            </a>
                        }
                    }
                    
                    <a asp-controller="Home" asp-action="Index" class="btn btn-secondary btn-block">
                        <i class="fas fa-arrow-left"></i> Voltar à Lista
                    </a>
                    
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a href="#" class="btn btn-success btn-block mt-2">
                            <i class="fas fa-shopping-cart"></i> Comprar (@Model.Price.ToString("C"))
                        </a>
                    }
                </div>
            </div>

            <!-- Estatisticas das Reviews -->
            @if (Model.Reviews != null && Model.Reviews.Any())
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h6>Estatísticas das Avaliações</h6>
                    </div>
                    <div class="card-body">
                        @{
                            var reviewStats = Model.Reviews.GroupBy(r => r.Rating)
                                                          .OrderByDescending(g => g.Key)
                                                          .ToDictionary(g => g.Key, g => g.Count());
                            var totalReviews = Model.Reviews.Count();
                        }
                        
                        @for (int rating = 5; rating >= 1; rating--)
                        {
                            var count = reviewStats.ContainsKey(rating) ? reviewStats[rating] : 0;
                            var percentage = totalReviews > 0 ? (count * 100.0 / totalReviews) : 0;
                            
                            <div class="d-flex align-items-center mb-1">
                                <span class="me-2">@rating ★</span>
                                <div class="progress flex-grow-1 me-2" style="height: 15px;">
                                    <div class="progress-bar bg-warning" role="progressbar" 
                                         style="width: @percentage%" 
                                         aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                                    </div>
                                </div>
                                <small class="text-muted">@count</small>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const deleteButtons = document.querySelectorAll('a[href*="Delete"]');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    if (!confirm('Tem certeza que deseja eliminar este item?')) {
                        e.preventDefault();
                    }
                });
            });

            const ratingInputs = document.querySelectorAll('input[name="Rating"]');
            const ratingLabels = document.querySelectorAll('.rating-input label');

            ratingInputs.forEach((input, index) => {
                input.addEventListener('change', function() {
                    ratingLabels.forEach(label => {
                        label.classList.remove('btn-warning');
                        label.classList.add('btn-outline-warning');
                    });
                    for (let i = 0; i <= index; i++) {
                        ratingLabels[i].classList.remove('btn-outline-warning');
                        ratingLabels[i].classList.add('btn-warning');
                    }
                });
            });

            const reviewTextarea = document.getElementById('ReviewText');
            if (reviewTextarea) {
                const maxLength = 500;
                const counterElement = document.createElement('small');
                counterElement.className = 'form-text text-muted float-end';
                reviewTextarea.parentNode.appendChild(counterElement);

                function updateCounter() {
                    const remaining = maxLength - reviewTextarea.value.length;
                    counterElement.textContent = `${reviewTextarea.value.length}/${maxLength} caracteres`;
                    
                    if (remaining < 50) {
                        counterElement.classList.remove('text-muted');
                        counterElement.classList.add('text-warning');
                    } else if (remaining < 0) {
                        counterElement.classList.remove('text-warning');
                        counterElement.classList.add('text-danger');
                    } else {
                        counterElement.classList.remove('text-warning', 'text-danger');
                        counterElement.classList.add('text-muted');
                    }
                }

                reviewTextarea.addEventListener('input', updateCounter);
                reviewTextarea.setAttribute('maxlength', maxLength);
                updateCounter(); 
            }
            const reviewForm = document.querySelector('form[action*="Reviews/Create"]');
            if (reviewForm) {
                reviewForm.addEventListener('submit', function(e) {
                    const ratingSelected = document.querySelector('input[name="Rating"]:checked');
                    if (!ratingSelected) {
                        e.preventDefault();
                        alert('Por favor, selecione uma classificação.');
                        return false;
                    }
                });
            }
        });
    </script>
}